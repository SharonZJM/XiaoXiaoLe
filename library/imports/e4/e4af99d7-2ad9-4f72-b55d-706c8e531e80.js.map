{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE7B,EAAE,CAAC,KAAK,CAAC;AACP,aAAS,EAAE,CAAC,SAAS;;AAErB,YAAU,EAAE;AACV,WAAO,EAAE,CAAC;AACV,aAAS,EAAE,EAAE,CAAC,KAAK;AACnB,cAAU,EAAE,EAAE,CAAC,KAAK;;GAErB;;AAED,MAAI,EAAE,cAAU,IAAI,EAAE;AACpB,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;GAC1B;;;;;AAKD,gBAAc,EAAE,0BAAY;AAC1B,QAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtB,QAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC;AAC7B,QAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;AAC9B,QAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;GACtB;;;;;AAKD,cAAY,EAAE,wBAAY;AACxB,QAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AACrC,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;GAC1B;;;;;AAKD,aAAW,EAAE,uBAAY;AACvB,QAAI,CAAC,YAAY,EAAE,CAAC;AACpB,QAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AACrD,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;GACtB;;AAED,QAAM,EAAE,gBAAU,EAAE,EAAE;;AAEpB,QAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE;AAClC,UAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,UAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAChC,UAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,YAAI,GAAG,GAAG,GAAG,IAAI,CAAC;OACnB;AACD,UAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAChC,UAAI,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACrC,UAAI,CAAC,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA,CAAE,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAClF;GACF;CACF,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var Utils = require('Utils');\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    maxTime: 0,             // 最大游戏时间\n    leftCount: cc.Label,    // 左边数字\n    rightCount: cc.Label    // 右边数字\n\n  },\n\n  init: function (game) {\n    this.game = game;\n    this.time = this.maxTime;\n  },\n\n  /**\n   * 计时回调\n   */\n  _countCallback: function () {\n    this.counting = false;\n    this.leftCount.string = '30';\n    this.rightCount.string = '00';\n    this.game.gameOver();\n  },\n\n  /**\n   * 停止计时\n   */\n  stopCounting: function () {\n    this.unschedule(this._countCallback);\n    this.time = this.maxTime;\n  },\n\n  /**\n   * 开始游戏计时器\n   */\n  oneSchedule: function () {\n    this.stopCounting();\n    this.scheduleOnce(this._countCallback, this.maxTime);\n    this.counting = true;\n  },\n\n  update: function (dt) {\n    /** 更新计时板计时 */\n    if (this.counting && this.time > 0) {\n      this.time -= dt;\n      var text = this.time.toFixed(2);\n      if (text.length === 4) {\n        text = '0' + text;\n      }\n      var textArray = text.split('.');\n      this.leftCount.string = textArray[0];\n      this.rightCount.string = Utils.prefixInteger((textArray[1] * 0.6).toFixed(0), 2);\n    }\n  }\n});\n"
  ]
}